void newTexture(float lado, int n) {
         int desp;
         if (i_desp > n) i_desp = n;
         else if (i_desp < 0) i_desp = 0;
         desp = i_desp;

         glEnable(GL_TEXTURE_2D);
         glActiveTexture(GL_TEXTURE0);
         glBindTexture(GL_TEXTURE_2D, textura_id);

         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

         glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, texture.width(), texture.height(), 0, GL_RGB, GL_UNSIGNED_BYTE, &data[0]);

         glColor3f(1, 1, 1);

         glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
         for (int i = 0; i < n; ++i) {
            desp = i_desp;
            for (int j = 0; j < n; ++j) {
               if (desp == n) desp = 0;
               glBegin(GL_POLYGON);
                  glTexCoord2d(desp/(1.0*n), (n-i)/(1.0*n));
                  glVertex3f(j*lado/(1.0*n), i*lado/(1.0*n), 0.0);
                  glVertex3f((j+1)*lado/(1.0*n), i*lado/(1.0*n), 0.0);
                  glVertex3f((j+1)*lado/(1.0*n), (i+1)*lado/(1.0*n), 0.0);
                  glVertex3f(j*lado/(1.0*n), (i+1)*lado/(1.0*n), 0.0);
               glEnd();
               ++desp;
            }
         }

         glBindTexture(GL_TEXTURE_2D, 0);
         glDisable(GL_TEXTURE_2D);

      }



      void Texture::drawTexture() {
          glEnable(GL_TEXTURE_2D);
          glActiveTexture(GL_TEXTURE0);
          glBindTexture(GL_TEXTURE_2D, ID);

          glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
          glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
          glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
          glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

          glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image.width(), image.height(), 0, GL_RGBA, GL_UNSIGNED_BYTE, &data);

          glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
          glBegin(GL_POLYGON);
              glTexCoord2f(0.0, 0.0); glVertex3f(-5.0, -5.0, 0.26);
              glTexCoord2f(0.0, 1.0); glVertex3f(5.0, -5.0, 0.26);
              glTexCoord2f(1.0, 1.0); glVertex3f(5.0, 5.0, 0.26);
              glTexCoord2f(1.0, 0.0); glVertex3f(-5.0, 5.0, 0.26);
          glEnd();

          glBindTexture(GL_TEXTURE_2D, ID);
          glDisable(GL_TEXTURE_2D);
      }











      //####################################################
      //
      //  Ángel Gómez Martín
      //  agomezm@correo.ugr.es
      //  3º A - Informática Gráfica 2017-18
      //  GII - ETSIIT
      //
      //  file: texture.cc
      //
      //####################################################

      #include "texture.h"

      Texture::Texture() {
           vertices[0] = -5;
           vertices[1] = 5;
           vertices[2] = 5;
           vertices[3] = 5;
           vertices[4] = 5;
           vertices[5] = -5;
           vertices[6] = -5;
           vertices[7] = -5;


           vertices[0] = 0.0;
           vertices[1] = 1.0;
           vertices[2] = 1.0;
           vertices[3] = 1.0;
           vertices[4] = 1.0;
           vertices[5] = 0.0;
           vertices[6] = 0.0;
           vertices[7] = 0.0;
      }

      Texture::Texture(const char *file) {
          loadTexture(file);
      }

      void Texture::loadTexture(const char *file) {
          image.load(file);

          height = image.height();
          width = image.width();

          for (long y = 0; y < height; y ++) {
              for (long x = 0; x < width; x ++) {
                  unsigned char *r = image.data(x, y, 0, 0);
                  unsigned char *g = image.data(x, y, 0, 1);
                  unsigned char *b = image.data(x, y, 0, 2);
                  data.push_back(*r);
                  data.push_back(*g);
                  data.push_back(*b);
              }
          }

          glGenTextures(1, &ID);
      }

      unsigned int Texture::getHeight() {
          return height;
      }

      unsigned int Texture::getWidth() {
          return width;
      }

      void Texture::drawTexture() {
          glEnable(GL_TEXTURE_2D);
          glActiveTexture(GL_TEXTURE0);
          glBindTexture(GL_TEXTURE_2D, ID);

          glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
          glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
          glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
          glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

          glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image.width(), image.height(), 0, GL_RGBA, GL_UNSIGNED_BYTE, &data);

          glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
          for (int i = 0; i < n; ++i) {
             for (int j = 0; j < n; ++j) {
                glBegin(GL_POLYGON);
                   glTexCoord2d(desp/(1.0*n), (n-i)/(1.0*n));
                   glVertex3f(j*lado/(1.0*n), i*lado/(1.0*n), 0.0);
                   glVertex3f((j+1)*lado/(1.0*n), i*lado/(1.0*n), 0.0);
                   glVertex3f((j+1)*lado/(1.0*n), (i+1)*lado/(1.0*n), 0.0);
                   glVertex3f(j*lado/(1.0*n), (i+1)*lado/(1.0*n), 0.0);
                glEnd();
             }
          }

          glBindTexture(GL_TEXTURE_2D, ID);
          glDisable(GL_TEXTURE_2D);
      }

      void Texture::disable() {
          //glDeleteTextures(1, &ID);
          glDisable(ID);
          glDisableClientState(GL_VERTEX_ARRAY);
          glBindTexture(GL_TEXTURE_2D, 0);
          glDisable(GL_TEXTURE_2D);

      }

      void Texture::clean() {
          glDeleteTextures(1, &ID);
      }
